AWSTemplateFormatVersion: '2010-09-09'
Description: Template to create an RDS instance and an EC2 instance

Parameters:

  DBName:
    Type: String
    Default: ytdb
  DBUser: 
    Type: String
    Default: admin
  DBPass:
    Type: String
    Description: "It should be less than 8 characters"
    Default: abcd1234

  LatestAmiId:
    Description: Gets the latest AMI from Systems Manager Parameter store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:

  PassParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /student/masterpassword
      Type: String
      Value: !Ref DBPass
      Description: Password of DB admin user

  DBNAMEParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /student/dbname
      Type: String
      Value: !Ref DBName
      Description: Name of DB

  DBUSERParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /student/dbuser
      Type: String
      Value: !Ref DBUser
      Description: Admin username

  ENDPOINTParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /student/endpoint
      Type: String
      Value: !GetAtt RDSInstance.Endpoint.Address
      Description: Endpoint of our DB
    DependsOn: RDSInstance

  Ec2SsmIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
    
  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: ssm-ec2-instance-profile
      Path: /
      Roles:
        - !Ref Ec2SsmIiamRole

  AppInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      AvailabilityZone: us-east-2a
      KeyName: ProjectKeyPair
      SecurityGroupIds:
        - !Ref AppNodeSG
      SubnetId: subnet-05e40181c52eb294d
      IamInstanceProfile: !Ref AppInstanceProfile
      UserData: !Base64 |
        #!/bin/bash
        sudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
        sudo yum install -y httpd
        sudo systemctl start httpd
        sudo systemctl enable httpd
        sudo usermod -a -G apache ec2-user
        sudo chown -R ec2-user:apache /var/www
        sudo chmod 2775 /var/www
        sudo find /var/www -type d -exec sudo chmod 2775 {} \;
        sudo find /var/www -type f -exec sudo chmod 0664 {} \;
        sudo mkdir /var/www/inc
        DBPASS=$(aws ssm get-parameter --name /student/masterpassword --region us-east-1 --query "Parameter.Value" --output text)
        DBENDP=$(aws ssm get-parameter --name /student/endpoint --region us-east-1 --query "Parameter.Value" --output text)
        DBUSER=$(aws ssm get-parameter --name /student/dbuser --region us-east-1 --query "Parameter.Value" --output text)
        DBNAME=$(aws ssm get-parameter --name /student/dbname --region us-east-1 --query "Parameter.Value" --output text)
        sudo aws s3 cp s3://module11lab2bucket/dbinfo.inc /var/www/inc/          
        sudo sed -i "s/endpoint/${DBENDP}/g" /var/www/inc/dbinfo.inc
        sudo sed -i "s/user/${DBUSER}/g" /var/www/inc/dbinfo.inc
        sudo sed -i "s/password/${DBPASS}/g" /var/www/inc/dbinfo.inc
        sudo sed -i "s/dbname/${DBNAME}/g" /var/www/inc/dbinfo.inc
        sudo aws s3 cp s3://module11lab2bucket/SamplePage.php /var/www/html/

      Tags:
        - Key: Name
          Vaule: PHPAPP-server1
    DependsOn: RDSInstance

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPass
      Engine: MySQL
      DBInstanceClass: db.t2.micro
      AllocatedStorage: "5"
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBInstanceIdentifier: !Join ["-", [ "RDSInstance", !Ref "AWS::Region" ]]
      AvailabilityZone: !Select [0, !GetAZs ""]
      DBSubnetGroupName: DBSubnets

  AppNodeSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: vpc-0194c2bf23257a1aa
      GroupDescription: SG to allow SSH and HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'

  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: vpc-0194c2bf23257a1aa
      GroupDecription: Allow to communicate with DB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref AppNodeSG

  DBSubnetG:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB subnets to use
      DBSubnetGroupName: DBSubnets
        - subnet-018377fe1ef3bd816
        - subnet-07c79bfc5b45e6c6a

Outputs:
  URL:
    Description: URL of the website
    Value: !Join ['', [!GetAtt AppInstance.PublicIp, /, 'SamplePage.php']]
      